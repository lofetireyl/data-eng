version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped


  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 1>/dev/null"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: spotifydb
    ports:
      - "5432:5432"
    volumes:
      - pg:/var/lib/postgresql/data
      - ./grundidee/db/init:/docker-entrypoint-initdb.d

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d spotifydb"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  adminer:
    image: adminer:4
    ports:
      - "8080:8080"       
    depends_on:
      db:
       condition: service_healthy
    restart: unless-stopped

  producer:
    build: ./producer
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      TOPIC: spotify-tracks
      SPOTIFY_TOKEN: ${SPOTIFY_TOKEN}
      ARTIST_ID: 3TVXtAsR1Inumwj472S9r4
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  spark-master:
    image: bitnami/spark:3.5
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_NO_DAEMONIZE: "yes"
    ports:
      - "7077:7077"   # RPC
      - "8080:8080"   # UI
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  spark-worker-1:
    image: bitnami/spark:3.5
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2G
      SPARK_NO_DAEMONIZE: "yes"
    depends_on:
      spark-master:
        condition: service_healthy
    restart: unless-stopped

  spark-jobs:
    build: ./spark
    environment:
      # Cluster
      SPARK_MASTER_URL: spark://spark-master:7077

      # ---- Bronze (Kafka -> Parquet)
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: spotify-tracks
      BRONZE_PATH: /data/bronze
      BRONZE_CHECKPOINT: /data/checkpoints/bronze

      # ---- Silver (optional)
      RUN_SILVER: "false"
      SILVER_PATH: /data/silver
      SILVER_CHECKPOINT: /data/checkpoints/silver

      DB_URL: jdbc:postgresql://db:5432/spotifydb
      DB_USER: user
      DB_PASS: password
    volumes:
      - sparkdata:/data
    depends_on:
      kafka:
        condition: service_healthy
      spark-master:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  streamlit:
    build: ./streamlit
    environment:
      DB_HOST: db
      DB_NAME: spotifydb
      DB_USER: user
      DB_PASS: password
    ports:
      - "8501:8501"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  jupyter:
    image: quay.io/jupyter/scipy-notebook:2025-03-14
    volumes:
      - ./notebooks:/home/jovyan/work
    environment:
      JUPYTER_TOKEN: dev
    ports:
      - "8888:8888"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pg:
