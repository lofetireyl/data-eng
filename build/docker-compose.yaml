services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      # check that 'srvr' responds and prints its mode
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/2181 && echo srvr >&3 && head -n 10 <&3 | grep -i Mode'"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 1>/dev/null"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped
  
  producer:
    build: ./kafka
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      TOPIC: spotify-tracks
      MARKET: AT
      POLL_INTERVAL_SECONDS: 3600
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  spark-master:
    image: apache/spark:3.5.1
    command: ["/opt/spark/bin/spark-class","org.apache.spark.deploy.master.Master",
              "--host","spark-master","--port","7077","--webui-port","8080"]
    ports:
      - "7077:7077"        # RPC
      - "8080:8080"        # UI (Adminer already moved to 8081 on host)
    healthcheck:
      # no curl/wget in the base image -> use bash /dev/tcp to check the UI
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080 && echo -e \"GET / HTTP/1.0\\r\\n\\r\\n\" >&3 && head -n 1 <&3 | grep -qi HTTP'"]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  spark-worker-1:
    image: apache/spark:3.5.1
    command: ["/opt/spark/bin/spark-class","org.apache.spark.deploy.worker.Worker","spark://spark-master:7077"]
    environment:
      SPARK_WORKER_CORES: "2"
      SPARK_WORKER_MEMORY: "2G"
    depends_on:
      spark-master:
        condition: service_healthy
    restart: unless-stopped

  spark-jobs:
    build: ./spark
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
      # Bronze
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: spotify-tracks
      KAFKA_STARTING_OFFSETS: earliest
      BRONZE_PATH: /data/bronze
      BRONZE_CHECKPOINT: /data/checkpoints/bronze
      # Silver + DB loader
      RUN_SILVER: "true"
      SILVER_PATH: /data/silver
      SILVER_CHECKPOINT: /data/checkpoints/silver
      RUN_DB_LOADER: "true"
      # DB
      DB_URL: jdbc:postgresql://db:5432/spotifydb
      DB_USER: user
      DB_PASS: password
    volumes:
      - sparkdata:/data
    depends_on:
      kafka:
        condition: service_healthy
      spark-master:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: spotifydb
      TZ: Europe/Vienna
    ports:
      - "5432:5432"
    volumes:
      - pg:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d spotifydb"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  adminer:
    image: adminer:4
    ports:
      - "8081:8080"       
    depends_on:
      db:
       condition: service_healthy
    restart: unless-stopped

volumes:
  pg:
  sparkdata: